/**
 * Judger.java
 *
 * @author buse
 */

package raykernel.apps.readability.judger;

import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

import raykernel.apps.readability.code.FileExtensionFilter;

/**
 * GUI for judging snippets
 * 
 * @author buse
 */
public class Judger extends javax.swing.JFrame implements GUI
{

	private static final long serialVersionUID = 1L;

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[])
	{
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run()
			{
				new Judger().setVisible(true);
			}
		});
	}

	private javax.swing.JMenuItem aboutMenuItem;

	private javax.swing.JLabel bottomLeftLabel;

	private javax.swing.JButton button1;

	private javax.swing.JButton button2;

	private javax.swing.JButton button3;

	private javax.swing.JButton button4;

	private javax.swing.JButton button5;

	private javax.swing.JButton buttonSkip;

	private javax.swing.JMenuItem exitMenuItem;

	private javax.swing.JMenu fileMenu;

	private javax.swing.JMenu helpMenu;

	private javax.swing.JMenuItem instructions;

	//******  Buttons

	private javax.swing.JMenuBar jMenuBar1;

	private javax.swing.JMenuItem loadSnippetsMenuItem;

	private javax.swing.JLabel logoLabel;

	private final JudgerModel model = new JudgerModel(this);
	private javax.swing.JProgressBar progressBar;
	private javax.swing.JMenuItem resumeSnippetsMenuItem;
	private javax.swing.JMenuItem saveSnippetsMenuItem;
	private javax.swing.JLabel snippetLabel;
	private javax.swing.JLabel statusLabel;
	/** Creates new form Judger */
	public Judger()
	{
		initComponents();

		this.snippetLabel.setText("  Please load a set of snippets for scoring.");
	}
	private void aboutActionPerformed(java.awt.event.ActionEvent evt)
	{

		BareBonesBrowserLaunch.openURL("http://www.arrestedcomputing.com/snippetsniper");
	}
	private File appendExtenionIfNeeded(File f)
	{
		String path = f.getAbsolutePath();

		if (path.endsWith(".score"))
			return f;

		return new File(path + ".score");
	}
	private void buttonPressed(int button)
	{
		model.scoreCurrent(button);
		updateStatus();
	}
	public void dispError(String message)
	{
		JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
	}
	protected void exitRequested()
	{

		if (model.needsToSave())
		{
			int exit = JOptionPane.showConfirmDialog(this, "Do you want to save?");
			if (exit == JOptionPane.NO_OPTION)
			{
				System.exit(0);
			}
			if (exit == JOptionPane.YES_OPTION)
			{
				saveSnippetsMenuItemActionPerformed(null);
			}
		}
		else
		{
			System.exit(0);
		}

	}
	private File getDefaultDirectory()
	{
		File f;
		try
		{
			f = new File(new File(".").getCanonicalPath());
		}
		catch (IOException e)
		{
			f = new File(".");
		}

		return f;
	}
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">                          
	private void initComponents()
	{
		statusLabel = new javax.swing.JLabel();
		button1 = new javax.swing.JButton();
		button2 = new javax.swing.JButton();
		button3 = new javax.swing.JButton();
		button4 = new javax.swing.JButton();
		button5 = new javax.swing.JButton();
		progressBar = new javax.swing.JProgressBar();
		bottomLeftLabel = new javax.swing.JLabel();
		buttonSkip = new javax.swing.JButton();
		snippetLabel = new javax.swing.JLabel();
		logoLabel = new javax.swing.JLabel();
		jMenuBar1 = new javax.swing.JMenuBar();
		fileMenu = new javax.swing.JMenu();
		loadSnippetsMenuItem = new javax.swing.JMenuItem();
		exitMenuItem = new javax.swing.JMenuItem();
		saveSnippetsMenuItem = new javax.swing.JMenuItem();
		resumeSnippetsMenuItem = new javax.swing.JMenuItem();
		helpMenu = new javax.swing.JMenu();
		instructions = new javax.swing.JMenuItem();
		aboutMenuItem = new javax.swing.JMenuItem();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Snippet Sniper 1.0");
		setResizable(true);
		statusLabel.setText("no snippets loaded");

		button1.setText("1");
		button1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				buttonPressed(1);
			}
		});

		button2.setText("2");
		button2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				buttonPressed(2);
			}
		});

		button3.setText("3");
		button3.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				buttonPressed(3);
			}
		});

		button4.setText("4");
		button4.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				buttonPressed(4);
			}
		});

		button5.setText("5");
		button5.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				buttonPressed(5);
			}
		});

		bottomLeftLabel.setText("ArrestedComputing.com/SnippetSniper");

		buttonSkip.setText("skip");
		buttonSkip.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				buttonPressed(0);
			}
		});

		snippetLabel.setBackground(new java.awt.Color(255, 255, 255));
		snippetLabel.setFont(new java.awt.Font("Courier New", 0, 18));
		snippetLabel.setText("no sippet loaded");
		snippetLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
		snippetLabel.setOpaque(true);
		snippetLabel.setAutoscrolls(true);

		logoLabel.setIcon(new javax.swing.ImageIcon("graphics/logo.png"));
		logoLabel.setText("");

		fileMenu.setText("File");

		loadSnippetsMenuItem.setText("Load snippets...");
		loadSnippetsMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				loadSnippetsMenuItemActionPerformed(evt);
			}
		});

		fileMenu.add(loadSnippetsMenuItem);

		resumeSnippetsMenuItem.setText("Resume scoring...");
		resumeSnippetsMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				resumeSnippetsMenuItemActionPerformed(evt);
			}
		});

		fileMenu.add(resumeSnippetsMenuItem);

		saveSnippetsMenuItem.setText("Save scores...");
		saveSnippetsMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				saveSnippetsMenuItemActionPerformed(evt);
			}
		});

		fileMenu.add(saveSnippetsMenuItem);

		exitMenuItem.setText("Exit");
		exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				exitRequested();
			}
		});

		fileMenu.addSeparator();
		fileMenu.add(exitMenuItem);

		jMenuBar1.add(fileMenu);

		helpMenu.setText("Help");
		instructions.setText("Instructions");
		instructions.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				instructionsActionPerformed(evt);
			}
		});

		helpMenu.add(instructions);

		aboutMenuItem.setText("About");
		aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				aboutActionPerformed(evt);
			}
		});

		helpMenu.add(aboutMenuItem);

		jMenuBar1.add(helpMenu);

		setJMenuBar(jMenuBar1);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addContainerGap().addGroup(
						layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false).addGroup(
								layout.createSequentialGroup().addGap(198, 198, 198).addComponent(button1)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(button2).addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(
												button3).addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(
												button4).addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(
												button5).addGap(223, 223, 223)).addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								layout.createSequentialGroup().addGroup(
										layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
												.addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING,
														javax.swing.GroupLayout.PREFERRED_SIZE, 632,
														javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(
														statusLabel, javax.swing.GroupLayout.Alignment.LEADING))
										.addContainerGap()))).addGroup(
				layout.createSequentialGroup().addContainerGap().addComponent(bottomLeftLabel).addGap(156, 156, 156)
						.addComponent(logoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 287,
								javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()).addGroup(
				layout.createSequentialGroup().addGap(294, 294, 294).addComponent(buttonSkip).addContainerGap(307,
						Short.MAX_VALUE)).addGroup(
				layout.createSequentialGroup().addContainerGap().addComponent(snippetLabel,
						javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE).addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addContainerGap().addComponent(snippetLabel,
						javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(statusLabel)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(progressBar,
								javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(
								javax.swing.LayoutStyle.ComponentPlacement.RELATED,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGroup(
								layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(
										layout.createSequentialGroup().addGroup(
												layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(button3).addComponent(button4).addComponent(
																button2).addComponent(button5).addComponent(button1))
												.addGap(22, 22, 22).addComponent(buttonSkip).addGap(32, 32, 32)
												.addComponent(logoLabel)).addComponent(bottomLeftLabel))
						.addContainerGap()));
		pack();
	}// </editor-fold>                        
	private void instructionsActionPerformed(java.awt.event.ActionEvent evt)
	{

		BareBonesBrowserLaunch.openURL("http://www.arrestedcomputing.com/snippetsniper/index.html#inst");
	}
	private void loadSnippetsMenuItemActionPerformed(java.awt.event.ActionEvent evt)
	{

		JFileChooser chooser = new JFileChooser();
		chooser.setDialogTitle("Select snippet directory");
		chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		chooser.setCurrentDirectory(getDefaultDirectory());

		int ret = chooser.showOpenDialog(this);

		if (ret != JFileChooser.APPROVE_OPTION)
			return;

		model.loadSnippets(chooser.getSelectedFile());

		this.progressBar.setMinimum(0);
		this.progressBar.setMaximum(model.totalSnippets());

		updateStatus();
	}

	protected void processWindowEvent(WindowEvent e)
	{

		if (e.getID() == WindowEvent.WINDOW_CLOSING)
		{
			this.exitRequested();
		}
		else
		{
			super.processWindowEvent(e);
		}
	}
	private void resumeSnippetsMenuItemActionPerformed(java.awt.event.ActionEvent evt)
	{

		JFileChooser chooser = new JFileChooser();
		chooser.setDialogTitle("Select Score File");
		chooser.setCurrentDirectory(getDefaultDirectory());
		FileExtensionFilter ff = new FileExtensionFilter("Score File", "score");
		chooser.setFileFilter(ff);

		int ret = chooser.showOpenDialog(this);

		if (ret != JFileChooser.APPROVE_OPTION)
			return;

		model.loadScores(chooser.getSelectedFile());

		this.progressBar.setMinimum(0);
		this.progressBar.setMaximum(model.totalSnippets());

		updateStatus();
	}
	private void saveSnippetsMenuItemActionPerformed(java.awt.event.ActionEvent evt)
	{

		JFileChooser chooser = new JFileChooser();
		chooser.setDialogTitle("Save Score File");
		chooser.setCurrentDirectory(getDefaultDirectory());
		FileExtensionFilter ff = new FileExtensionFilter("Score File", "score");
		chooser.setFileFilter(ff);

		int ret = chooser.showSaveDialog(this);

		if (ret != JFileChooser.APPROVE_OPTION)
			return;

		model.exportScores(appendExtenionIfNeeded(chooser.getSelectedFile()));
	}
	private void updateStatus()
	{
		if (!model.ready())
		{
			this.snippetLabel.setText("   Please load a set of snippets for scoring.");
			this.statusLabel.setText("no snippets loaded");
			this.progressBar.setValue(0);
			return;
		}

		//check to see if we are done
		if (model.isDone())
		{
			this.snippetLabel.setText("   Scoring Complete!");
			this.statusLabel.setText("progress: done. ");
			this.progressBar.setValue(model.currentSnippetNumber());

			if (model.needsToSave())
			{
				saveSnippetsMenuItemActionPerformed(null);
			}
		}
		else
		{
			this.snippetLabel.setText(model.getCurrentSnippet());
			this.statusLabel.setText("progress: snippet " + (model.currentSnippetNumber()) + " of "
					+ model.totalSnippets());
		}

		this.progressBar.setValue(model.currentSnippetNumber());
	}

}
